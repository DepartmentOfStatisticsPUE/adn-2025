---
title: "2. Imputacja dedukcyjna"
format: 
  html:
    self-contained: true
    number-sections: true
    toc: true
    toc-title: "Spis treści"
editor: source
---

# Wczytanie potrzebych pakietów

::: panel-tabset
## R


```{r packages, message=F, warning=F}
library(data.table)
library(tidyr) ## funkcja fill
library(stringr)
library(zoo)
library(MASS)
library(validate)
library(deductive)
```

## Python

```{python}
import pandas as pd
import numpy as np
import re
from numpy.linalg import pinv
from sympy import symbols, solve, Eq
```
:::


# Przykład imptuacji dedukcyjnej

Dane są posortowane wg liczby pokoi (`liczba_pokoi`) i zawierają następujące kolumny:

+ `id` -- identyfikator
+ `liczba_pokoi` -- liczba pokoi
+ `województwo` -- województwo (słownie)
+ `powiat` -- numer teryt (7 cyfrowy)
+ `cena` -- cena nieruchomości
+ `powierzchnia` -- powierzchnia nieruchomości
+ `tytul` -- tytuł ogłoszenia

Cel: zaimputowanie brakujących wartości.

::: panel-tabset
## R


```{r}
dane <- read.csv("../data/data3-przyklad-imputacji.csv")
head(dane)
```

```{r}
dane |> 
  fill(liczba_pokoi)
```

```{r}
zoo::na.locf(dane$liczba_pokoi)
```

```{r}
data.table::nafill(dane$liczba_pokoi, "locf")
```

Operacja `inplace`.

```{r}
data.table::setnafill(dane, "locf", cols = c("liczba_pokoi"))
dane
```

Na podstawie nr identyfikatora powiatu -> województwo

```{r}
substr("1465011", 1, 2)
```

`powierzchnia` -- na podstwie wyrażen regularnych

```{r}
str_extract("Przytulna kawalerka 32,1m2, 1 pokój w centrum!", "\\d{2},\\d{1}")
```

## Python

```{python}
dane = pd.read_csv("../data/data3-przyklad-imputacji.csv")
print(dane.head())
```

Odpowiednik `fill()` z `tidyverse`

```{python}
dane['liczba_pokoi'].fillna(method='ffill', inplace=False)
```

Odpowiednik `zoo::na.locf()`

```{python}
dane['liczba_pokoi'].ffill()
```


```{python}
"1465011"[:2]  # pierwsze 2 znaki
```

Odpowiednik `str_extract()`

```{python}
tekst = "Przytulna kawalerka 32,1m2, 1 pokój w centrum!"
pattern = r'\d{2},\d{1}'
match = re.search(pattern, tekst)
if match:
    print(match.group())
```

Alternatywnie z pandas

```{python}
s = pd.Series(["Przytulna kawalerka 32,1m2, 1 pokój w centrum!"])
s.str.extract(r'(\d{2},\d{1})')
```


:::

# Imputacja dedukcyjna z ograniczeniami

## Bez wykorzystania dodatkowych pakietów

::: panel-tabset
## R

Przykład 1 z zajęć

```{r}
# Znane wartości
x1 <- 100
x4 <- 40
x3 <- 150
# Definiujemy macierze dla układu równań:
# x1 + x2 = x3
# x4 + x5 = x1
# Macierz dla niewiadomych [x2, x5]
Am <- matrix(c(1, 0, 0, 1), nrow = 2, byrow = TRUE)
 
 # Macierz dla znanych wartości [x1, x3, x4]
Ao <- matrix(c(1, -1, 0, 
               -1, 0, 1), 
             nrow = 2, byrow = TRUE)
 
# Wektor znanych wartości
xo <- matrix(c(100, 150, 40), nrow = 3)
 
# Wektor wyrazów wolnych
b <- matrix(c(0, 0), nrow = 2)

# Obliczamy prawą stronę równania
b_star <- b - Ao %*% xo
# Rozwiązujemy używając pseudoodwrotności Moore-Penrose
x_m <- ginv(Am) %*% b_star
x_m
```

Przykład 2 z zajęć

```{r}
# Definiujemy macierze
Am <- matrix(c(1, -1, -1, 0), nrow = 2, byrow = TRUE)
Ao <- matrix(c(1, 2), nrow = 2, ncol = 1)
xo <- matrix(10, nrow = 1)
b <- matrix(c(0, 0), nrow = 2)
b_star <- b - Ao %*% xo
xm <- solve(Am, b_star)
xm
```

## Python

Przykład 1 z zajęć

```{python}
x1 = 100
x4 = 40
x3 = 150
    
# Definiujemy macierze dla układu równań:
# x2 = x3 - x1      →  x2 + (-1)x3 + x1 = 0
# x5 = x1 - x4      →  x5 + (-1)x1 + x4 = 0
    
# Macierz dla niewiadomych [x2, x5]
Am = np.array([
        [1, 0],     # przy x2
        [0, 1]      # przy x5
        ])
    
    # Macierz dla znanych wartości [x1, x3, x4]
Ao = np.array([
        [1, -1, 0],    # przy x1, x3, x4 w równaniu dla x2
        [-1, 0, 1]     # przy x1, x3, x4 w równaniu dla x5
        ])
    
    # Wektor znanych wartości [x1, x3, x4]
xo = np.array([x1, x3, x4])
    
    # Wektor wyrazów wolnych
b = np.zeros(2)
    
    # Obliczamy prawą stronę równania
b_star = b - np.dot(Ao, xo)
    
    # Obliczamy rozwiązanie używając pseudoodwrotności Moore-Penrose
x_m = np.dot(pinv(Am), b_star)
x_m
```

Przykład 2 z zajęć

```{python}
Am = np.array([[1, -1],[-1, 0]])
Ao = np.array([[1], [2]])
xo = np.array([10])
b = np.array([0, 0])
b_star = b - np.dot(Ao, xo)
xm = np.linalg.solve(Am, b_star)
xm
```

:::


## Wykorystanie odpowiednich pakietow

::: panel-tabset

## R
Z wykorzystaniem pakietu `validate` i `deducorrect` (tylko R)

```{r}
v <- validate::validator(
      x1 + x2 == x3,
      x4 + x5 == x1)
v
```

```{r}
dat <- data.frame(x1 = 100, x2=NA_real_, x3=150, x4 = 40, x5 = NA_real_)
dat
```

```{r}
impute_lr(dat,v)
```

## Python

```{python}
x1, x2, x3, x4, x5 = symbols('x1 x2 x3 x4 x5')
    
eq1 = Eq(x1 + x2, x3)  # x1 + x2 = x3
eq2 = Eq(x4 + x5, x1)  # x4 + x5 = x1

known_values = {
        x1: 100,  # x1 = 100
        x4: 40,   # x4 = 40
        x3: 150   # x3 = 150
        }
    
# Tworzymy system równań
system = [eq1.subs(known_values), eq2.subs(known_values)]
    
# Rozwiązujemy system
solution = solve(system, [x2, x5])
solution
# Tworzymy pełne rozwiązanie dodając znane wartości
full_solution = {**known_values, **solution}
full_solution
```

:::