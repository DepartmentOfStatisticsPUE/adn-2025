---
title: "3. Imputacja NN"
format: 
  html:
    self-contained: true
    number-sections: true
    toc: true
    toc-title: "Spis treści"
editor: source
---

# Wczytanie potrzebych pakietów

::: panel-tabset
## R

```{r pakiety}
library(simputation)
library(VIM)
```


## Python

```{python moduly}
import numpy as np
import pandas as pd
from scipy.stats import norm
from sklearn.impute import KNNImputer
import matplotlib.pyplot as plt
```

:::

# Przykład 1

::: panel-tabset

## R

```{r symulacja1}
# Ustawienie ziarna losowości dla reprodukowalności
set.seed(123)

# Parametry symulacji
N <- 50000  # rozmiar populacji
n <- 400    # rozmiar próby

# Generowanie zmiennych objaśniających
x1 <- runif(N, 0, 1)
x2 <- runif(N, 0, 1)
x3 <- runif(N, 0, 1)
x4 <- rnorm(N, 0, 1)
x5 <- rnorm(N, 0, 1)
x6 <- rnorm(N, 0, 1)
e <- rnorm(N, 0, 1)

# Generowanie zmiennej y dla trzech modeli
y1 <- -1 + x1 + x2 + e
y2 <- -1.167 + x1 + x2 + (x1-0.5)^2 + (x2-0.5)^2 + e
y3 <- -1.5 + x1 + x2 + x3 + x4 + x5 + x6 + e

# Tworzenie wskaźnika odpowiedzi (mechanizm braków danych)
logit_p <- 0.2 + x1 + x2
p <- exp(logit_p)/(1 + exp(logit_p))


# Tworzenie ramki danych
populacja <- data.frame(
 id = 1:N,
 x1 = x1,
 x2 = x2,
 x3 = x3,
 x4 = x4,
 x5 = x5,
 x6 = x6,
 y1 = y1,
 y2 = y2,
 y3 = y3,
 p = p
)
y_true <- colMeans(populacja[, c("y1", "y2", "y3")]) 

## sumulacja (100 razy)
R <- 500
results <- matrix(0, R, 6)
colnames(results) <- paste0(rep(c("naive", "nn"), each = 3), rep(c("_y1", "_y2", "_y3"), times=2))

for (r in 1:R) {
  proba <- populacja[sample(1:N, n), ]
  proba$delta <- rbinom(nrow(proba), 1, proba$p)
  proba$y1[proba$delta == 0] <- NA
  proba$y2[proba$delta == 0] <- NA
  proba$y3[proba$delta == 0] <- NA
  
  results[r, 1:3] <- colMeans(proba[, c(c("y1", "y2", "y3"))], na.rm=T)
  
  res_y1_y2 <- impute_knn(proba, y1 + y2  ~ x1 + x2, k=5)
  res_y3 <- impute_knn(proba, y3  ~ x1 + x2 + x3 + x3 + x4 + x5 + x6, k=5)
 
  proba$y1 <- res_y1_y2$y1
  proba$y2 <- res_y1_y2$y2
  proba$y3 <- res_y3$y3
  
  results[r, 4:6] <- colMeans(proba[, c(c("y1", "y2", "y3"))], na.rm=T)
   
}

boxplot(results - rep(y_true,times = 2), xlab = "Estymator", ylab = "Obciążenie",
        main = "Wpływ liczby zmiennych w imputacji NN na obciązenie") 
abline(a=0,b=0,col="red")
```

## Python

```{python symulacja1}
# Ustawienie ziarna losowości
np.random.seed(123)

# Parametry symulacji
N = 50000  # rozmiar populacji
n = 400    # rozmiar próby

# Generowanie zmiennych objaśniających
x1 = np.random.uniform(0, 1, N)
x2 = np.random.uniform(0, 1, N)
x3 = np.random.uniform(0, 1, N)
x4 = np.random.normal(0, 1, N)
x5 = np.random.normal(0, 1, N)
x6 = np.random.normal(0, 1, N)
e = np.random.normal(0, 1, N)

# Generowanie zmiennej y dla trzech modeli
y1 = -1 + x1 + x2 + e
y2 = -1.167 + x1 + x2 + (x1-0.5)**2 + (x2-0.5)**2 + e
y3 = -1.5 + x1 + x2 + x3 + x4 + x5 + x6 + e

# Tworzenie wskaźnika odpowiedzi
logit_p = 0.2 + x1 + x2
p = np.exp(logit_p)/(1 + np.exp(logit_p))
# Tworzenie ramki danych
populacja = pd.DataFrame({
   'id': range(N),
   'x1': x1,
   'x2': x2,
   'x3': x3,
   'x4': x4,
   'x5': x5,
   'x6': x6,
   'y1': y1,
   'y2': y2,
   'y3': y3,
   'p': p
})

y_true = populacja[['y1', 'y2', 'y3']].mean()

# Symulacja (500 razy)
R = 500
results = np.zeros((R, 6))
columns = [f"{t}_{y}" for t in ['naive', 'nn'] for y in ['y1', 'y2', 'y3']]

for r in range(R):
   # Losowanie próby
   proba = populacja.sample(n=n)
   
   # Generowanie braków danych
   delta = np.random.binomial(1, proba['p'])
   proba.loc[delta == 0, ['y1', 'y2', 'y3']] = np.nan
   
   # Średnie dla metody naiwnej
   results[r, 0:3] = proba[['y1', 'y2', 'y3']].mean()
   
   # Imputacja KNN
   imputer_y1_y2 = KNNImputer(n_neighbors=5)
   imputer_y3 = KNNImputer(n_neighbors=5)
   
   # Imputacja dla y1, y2
   y1_y2_imputed = imputer_y1_y2.fit_transform(proba[['y1', 'y2', 'x1', 'x2']])
   proba['y1'] = y1_y2_imputed[:, 0]
   proba['y2'] = y1_y2_imputed[:, 1]
   
   # Imputacja dla y3
   y3_imputed = imputer_y3.fit_transform(proba[['y3', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6']])
   proba['y3'] = y3_imputed[:, 0]
   
   # Średnie po imputacji
   results[r, 3:6] = proba[['y1', 'y2', 'y3']].mean()

plt.figure(figsize=(10, 6))
bias = results - np.tile(y_true, 2)
plt.boxplot(bias)
plt.axhline(y=0, color='r', linestyle='-')
plt.xlabel('Estymator')
plt.ylabel('Obciążenie')
plt.title('Wpływ liczby zmiennych w imputacji NN na obciążenie')
plt.xticks(range(1, 7), columns)
plt.show()
```


:::
